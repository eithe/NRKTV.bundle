# -*- coding: utf-8 -*-

# "THE BEER-WARE LICENSE" (Revision 42):
# eithe and burnbay @plexforums wrote this file.  As long as you retain this
# notice you can do whatever you want with this stuff. If we meet some day,
# and you think this stuff is worth it, you can buy us a beer in return. Eirik H.

# Some of this stuff is from:
# jonklo's NRK Plex plugin: https://github.com/plexinc-plugins/NRK.bundle
# takoi's NRK XBMC plugin: https://github.com/takoi/xbmc-addon-nrk
# Please comply with their licenses, I haven't looked at them yet.

# NRK, if you are watching, don't hesitate to make contact.

SSL_CAPABLE_CLIENTS = [ClientPlatform.iOS, ClientPlatform.MacOSX]
RE_KEY_URI = Regex('URI *= *"(.*)"')
USER_AGENT = 'AppleCoreMedia/1.0.0.11A501 (iPad; U; CPU OS 7_0_2 like Mac OS X; en_us)'
THUMB_URL = "http://nrk.eu01.aws.af.cm/t/%s"
FANART_URL = "http://nrk.eu01.aws.af.cm/f/%s"
API_META_URL = "http://v8.psapi.nrk.no/mediaelement/%s"
RE_VIDEO_ID = Regex('\w{4}\d{8}')
USERAGENT_FOR_CLIENTS = (
    {
        ClientPlatform.MacOSX: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.3 Safari/534.53.10',
        ClientPlatform.Linux: 'Mozilla/5.0 (X11; CrOS i686 4319.74.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/29.0.1547.57 Safari/537.36',
        ClientPlatform.Windows: 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36',
        ClientPlatform.iOS: 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10',
        ClientPlatform.Android: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/534.24 (KHTML, like Gecko) Chrome/11.0.696.34 Safari/534.24',
        ClientPlatform.Roku: 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10',
        'Plex Home Theater': 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10',
        'Safari': 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10',
        'Chrome': 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10',
        'Unknown Browser': 'Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10'
    }
)

def MetadataObjectForURL(url):
    # Request the URL
    video_id = RE_VIDEO_ID.search(url).group()
    meta_url = API_META_URL % video_id
    response = JSON.ObjectFromURL(meta_url)
    # Extract the details available directly from the page.
    title = response['title']
    summary = response['description']
    if response['images']['webImages'] is not None:
        thumb = response['images']['webImages'][len(response['images']['webImages'])-2]['imageUrl']
        fanart = response['images']['webImages'][len(response['images']['webImages'])-1]['imageUrl']
    else:
        thumb = THUMB_URL % response['relativeOriginUrl']
        fanart = FANART_URL % response['relativeOriginUrl']

    #Log.Debug('MetadataObjectForURL: ' + title)
    return VideoClipObject(
        title = title,
        summary = summary,
        thumb = thumb,
        art = fanart)

def MediaObjectsForURL(url):
    searchObj = RE_VIDEO_ID.search(url)
    if searchObj:
        video_id = searchObj.group()
        return [
                MediaObject(
                    video_resolution = 720,
                    optimized_for_streaming = True,
                    audio_channels = 2,
                    parts = [
                            PartObject(
                                    key = HTTPLiveStreamURL(Callback(PlayVideo, video_id = video_id))
                                    #key = HTTPLiveStreamURL(PlayVideo(video_id))
                                )
                            ]
                    )
                ]


def PlayVideo(video_id):
    mediaMetadataUrl = API_META_URL % video_id
    user_agent = "Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B334b Safari/531.21.10"

    if Client.Platform in USERAGENT_FOR_CLIENTS:
        user_agent = USERAGENT_FOR_CLIENTS[Client.Platform]

    video_url = JSON.ObjectFromURL(mediaMetadataUrl, headers={'User-Agent': user_agent})['mediaUrl']

    streams = GetHLSStreams(video_url)

    if Client.Platform in SSL_CAPABLE_CLIENTS:
        return Redirect(streams[0]['url'])
    else:
        cookies = HTTP.CookiesForURL(video_url)
        return Redirect(Callback(CreatePatchedPlaylist, url = streams[0]['url'], cookies = cookies))

def GetHLSStreams(url):
    streams = []

    playList = HTTP.Request(url).content
    #Log.Debug("M3U8: " + playList)

    stream = {}
    # Parse the m3u8 file to get:
    # - URL
    # - Resolution
    # - Bitrate
    for line in playList.splitlines():
        if "BANDWIDTH" in line:
            stream            = {}
            stream["bitrate"] = int(Regex('(?<=BANDWIDTH=)[0-9]+').search(line).group(0))

        elif line.startswith("#"):
            pass

        elif ".m3u8" in line:
            path = ''
            if not line.startswith("http"):
                path = url[ : url.rfind('/') + 1]

            stream["url"] = path + line
            streams.append(stream)

    sorted_streams = sorted(streams, key = lambda stream: stream["bitrate"], reverse = True)

    return sorted_streams

def CreatePatchedPlaylist(url, cookies):
    headers               = {}
    headers['Cookie']     = cookies
    headers['User-Agent'] = USER_AGENT

    original_playlist = HTTP.Request(url, headers = headers, cacheTime = 0).content

    new_playlist = ''

    for line in original_playlist.splitlines():
        if line.startswith('#EXT-X-KEY'):
            original_key_url = RE_KEY_URI.search(line).groups()[0]
            new_key_url = Callback(ContentOfURL, url = original_key_url, cookies = cookies)
            new_playlist = new_playlist + line.replace(original_key_url, new_key_url) + '\n'
        elif line.startswith('http'):
            original_segment_url = line
            new_segment_url = Callback(ContentOfURL, url = original_segment_url, cookies = cookies)
            new_playlist = new_playlist + new_segment_url + '\n'
        else:
            new_playlist = new_playlist + line + '\n'

    return new_playlist

def ContentOfURL(url, cookies):
    headers               = {}
    headers['Cookie']     = cookies
    headers['User-Agent'] = USER_AGENT

    return HTTP.Request(url, cacheTime = 0).content
